{"version":3,"sources":["TopBar/ArraySizeSelector.js","TopBar/SortingAlgorithms.js","TopBar/AlgorithmSelector.js","TopBar/ArrayTypeSelector.js","App.js","serviceWorker.js","index.js"],"names":["ArraySizeSelector","props","type","name","min","max","step","defaultValue","onChange","e","onChangeHandler","target","value","Algorithm","method","this","BubbleSort","arr","Swap","Continue","Update","a","i","length","j","partition","left","right","pivot","quickSort","then","Promise","all","QuickSort","mergeSort","array","mid","Math","floor","leftHalf","slice","rightHalf","k","color","MergeSort","SortingAlgorithms","el","SortingOptions","map","algo","AlgorithmSelector","find","sendAlgorithm","TypeOptions","ArrayTypeSelector","Strip","App","componentDidMount","setState","stripsArray","generateStripsArray","state","arraySize","arrayType","surfaceHeight","maxValue","stripLengthArray","push","ceil","random","increment","val","secondIndex","decrement","currentlySorting","sleep","runSort","swapMethod","checkContinue","sortingAlgorithm","stopSort","handleArraySizeSelector","handleAlgorithmSelector","algorithm","handleArrayTypeSelector","TopBar","className","onClick","Strips","strip","stripStyles","height","backgroundColor","key","uuidv4","style","surfaceStyles","width","margin","window","innerHeight","ms","resolve","setTimeout","replace","c","r","toString","ref","React","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cf0742e7.chunk.js","sourcesContent":["import React from 'react';\n\nconst ArraySizeSelector = props => {\n    return (\n        <span>\n            <input\n                type=\"range\"\n                name=\"Array Size\"\n                min={props.min}\n                max={props.max}\n                step={props.step}\n                defaultValue={props.defaultValue}\n                onChange={e => props.onChangeHandler(e.target.value)}\n            />\n        </span>\n    );\n};\n\nexport default ArraySizeSelector;\n","class Algorithm {\n    constructor(name, method) {\n        this.name = name;\n        this.method = method;\n    }\n}\n\nconst BubbleSort = new Algorithm(\n    'Bubble Sort',\n    async (arr, Swap, Continue, Update) => {\n        firstLoop: for (let i = arr.length - 1; i >= 0; i--) {\n            for (let j = 1; j <= i; j++) {\n                if (arr[j - 1].length > arr[j].length) {\n                    if (!Continue()) {\n                        break firstLoop;\n                    }\n                    await Swap(arr, j - 1, j);\n                }\n            }\n        }\n    }\n);\n\nconst partition = async (arr, left, right, Swap) => {\n    let pivot = arr[right];\n    let i = left - 1;\n    for (let j = left; j < right; j++) {\n        if (arr[j].length < pivot.length) {\n            i += 1;\n            await Swap(arr, i, j);\n        }\n    }\n    await Swap(arr, i + 1, right);\n    return i + 1;\n};\n\nconst quickSort = async (arr, left, right, Swap, Continue) => {\n    if (left < right && Continue()) {\n        partition(arr, left, right, Swap).then(pivot => {\n            Promise.all([\n                quickSort(arr, left, pivot - 1, Swap, Continue),\n                quickSort(arr, pivot + 1, right, Swap, Continue)\n            ]);\n        });\n    }\n};\n\nconst QuickSort = new Algorithm(\n    'Quick Sort',\n    async (arr, Swap, Continue, Update) => {\n        quickSort(arr, 0, arr.length - 1, Swap, Continue);\n    }\n);\n\nconst mergeSort = async (array, Continue, Update) => {\n    if (array.length > 1 && Continue()) {\n        let mid = Math.floor(array.length / 2),\n            leftHalf = array.slice(0, mid),\n            rightHalf = array.slice(mid, array.length);\n\n        Promise.all([\n            mergeSort(leftHalf, Continue, Update),\n            mergeSort(rightHalf, Continue, Update)\n        ]);\n\n        let i = 0,\n            j = 0,\n            k = 0;\n\n        while (i < leftHalf.length && j < rightHalf.length) {\n            if (leftHalf[i].length <= rightHalf[j].length) {\n                array[k] = leftHalf[i];\n                array[k].color = 'red';\n                await Update(array);\n                array[k].color = 'white';\n                i += 1;\n            } else {\n                array[k] = rightHalf[j];\n                array[k].color = 'red';\n                await Update(array);\n                array[k].color = 'white';\n\n                j += 1;\n            }\n            k += 1;\n        }\n\n        while (i < leftHalf.length) {\n            array[k] = leftHalf[i];\n            array[k].color = 'red';\n\n            await Update(array);\n            array[k].color = 'white';\n\n            i += 1;\n            k += 1;\n        }\n\n        while (j < rightHalf.length) {\n            array[k] = rightHalf[j];\n            array[k].color = 'red';\n            await Update(array);\n            array[k].color = 'white';\n\n            j += 1;\n            k += 1;\n        }\n    }\n};\n\nconst MergeSort = new Algorithm(\n    'Merge Sort',\n    async (array, Swap, Continue, Update) => {\n        mergeSort(array, Continue, Update);\n    }\n);\n\nconst SelectionSort = new Algorithm(\n    'Selection Sort',\n    async (array, Swap, Continue, Update) => {\n        firstLoop: for (let i = 0; i < array.length; i++) {\n            //set min to the current iteration of i\n            let min = i;\n            for (let j = i + 1; j < array.length; j++) {\n                if (array[j].length < array[min].length) {\n                    min = j;\n                }\n                if (!Continue()) {\n                    break firstLoop;\n                }\n            }\n            await Swap(array, i, min);\n        }\n    }\n);\nconst InsertionSort = new Algorithm(\n    'Insertion Sort',\n    async (arr, Swap, Continue, Update) => {\n        firstLoop: for (let i = 0; i < arr.length; i++) {\n            let el = arr[i];\n            let j = i - 1;\n            if (!Continue()) {\n                break;\n            }\n\n            while (j >= 0 && arr[j].length > el.length) {\n                arr[j + 1] = arr[j];\n                \n                arr[j + 1].color = 'red';\n                await Update(arr);\n                arr[j + 1].color = 'white';\n\n                if (!Continue()) {\n                    break firstLoop;\n                }\n\n                j -= 1;\n            }\n            arr[j + 1] = el;\n            await Update(arr);\n        }\n    }\n);\n\nconst SortingAlgorithms = [\n    BubbleSort,\n    SelectionSort,\n    InsertionSort,\n    QuickSort,\n    MergeSort\n];\n\nexport default SortingAlgorithms;\n","import React from 'react';\nimport './Dropdown.scss';\nimport SortingAlgorithms from './SortingAlgorithms';\n\nconst SortingOptions = SortingAlgorithms.map(algo => (\n    <option value={algo.name}>{algo.name}</option>\n));\n\nconst AlgorithmSelector = props => {\n    const sendAlgorithm = value => {\n        const Algorithm = SortingAlgorithms.find(\n            Algorithm => Algorithm.name === value\n        );\n        props.onChangeHandler(Algorithm);\n    };\n    return (\n        <select\n            name=\"AlgorithmSelector\"\n            onChange={e => sendAlgorithm(e.target.value)}\n        >\n            {SortingOptions}\n        </select>\n    );\n};\n\nexport default AlgorithmSelector;\n","import React from 'react';\nimport './Dropdown.scss';\n\nconst ArrayTypes = ['Random', 'Almost Sorted', 'Reversed'];\nconst TypeOptions = ArrayTypes.map(type => (\n    <option value={type}>{type}</option>\n));\n\nconst ArrayTypeSelector = props => (\n    <select\n        name=\"ArrayTypeSelector\"\n        onChange={e => props.onChangeHandler(e.target.value)}\n    >\n        {TypeOptions}\n    </select>\n);\n\nexport default ArrayTypeSelector;\n","import React from 'react';\n\nimport './styles/globals.scss';\nimport './App.scss';\n\nimport ArraySizeSelector from './TopBar/ArraySizeSelector';\nimport AlgorithmSelector from './TopBar/AlgorithmSelector';\nimport ArrayTypeSelector from './TopBar/ArrayTypeSelector';\nimport SortingAlgorithms from './TopBar/SortingAlgorithms';\n\nclass Strip {\n    constructor(length = 10, color = 'rgb(25, 125, 51)') {\n        this.length = length;\n        this.color = color;\n    }\n}\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            arraySize: 100,\n            stripsArray: [],\n            sortingAlgorithm: SortingAlgorithms[0],\n            arrayType: 'Random',\n            currentlySorting: false\n        };\n        this.surfaceHeight = window.innerHeight / 1.3;\n    }\n\n    componentDidMount = () => {\n        this.setState({\n            stripsArray: this.generateStripsArray(\n                this.state.arraySize,\n                this.state.arrayType,\n                this.surfaceHeight\n            )\n        });\n    };\n\n    generateStripsArray = (arraySize, arrayType, maxValue) => {\n        let stripLengthArray = [];\n\n        switch (arrayType) {\n            case 'Random':\n                for (let i = 0; i < arraySize; i++) {\n                    stripLengthArray.push(Math.ceil(Math.random() * maxValue));\n                }\n                break;\n\n            case 'Almost Sorted':\n                let increment = (maxValue - 10) / (arraySize - 1);\n                for (let val = 10; val <= maxValue; val += increment) {\n                    stripLengthArray.push(Math.floor(val));\n                }\n\n                let firstIndex = 2,\n                    secondIndex = arraySize - 3;\n\n                [\n                    stripLengthArray[firstIndex],\n                    stripLengthArray[secondIndex]\n                ] = [\n                    stripLengthArray[secondIndex],\n                    stripLengthArray[firstIndex]\n                ];\n                break;\n\n            case 'Reversed':\n                let decrement = (maxValue - 10) / (arraySize - 1);\n                for (let val = maxValue; val >= 10; val -= decrement) {\n                    stripLengthArray.push(Math.floor(val));\n                }\n                break;\n\n            default:\n                break;\n        }\n\n        // let scaleFactor = maxValue / 10;\n\n        let strips = stripLengthArray.map(length => {\n            // let hue = 0,\n            //     saturation = 100,\n            //     luminosity = length / scaleFactor + 90;\n            // let color = `hsl(${hue}, ${saturation}%, ${luminosity}%)`;\n            let color = 'white';\n            return new Strip(length, color);\n        });\n\n        return strips;\n    };\n\n    sleep(ms = 0) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    uuidv4() {\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n            var r = (Math.random() * 16) | 0,\n                v = c === 'x' ? r : (r & 0x3) | 0x8;\n            return v.toString(16);\n        });\n    }\n\n    Swap = async (arr, i, j) => {\n        if (this.state.currentlySorting) {\n            arr[i].color = 'red';\n            arr[j].color = 'red';\n\n            for (let k = i + 1; k < j; k++) {\n                arr[k].color = 'pink';\n            }\n\n            [arr[i], arr[j]] = [arr[j], arr[i]];\n\n            this.setState({\n                stripsArray: arr\n            });\n\n            for (let k = i; k <= j; k++) {\n                arr[k].color = 'white';\n            }\n\n            await this.sleep();\n        }\n    };\n\n    Update = async array => {\n        if (this.state.currentlySorting) {\n            this.setState({\n                stripsArray: array\n            });\n            await this.sleep();\n        }\n    };\n\n    Continue = () => this.state.currentlySorting;\n\n    runSort = async (array, swapMethod, checkContinue, Update) => {\n        await this.setState({\n            currentlySorting: true\n        });\n        this.state.sortingAlgorithm.method(\n            array,\n            swapMethod,\n            checkContinue,\n            Update\n        );\n    };\n\n    stopSort = () => {\n        this.setState({\n            currentlySorting: false,\n            stripsArray: this.generateStripsArray(\n                this.state.arraySize,\n                this.state.arrayType,\n                this.surfaceHeight\n            )\n        });\n    };\n\n    handleArraySizeSelector = arraySize => {\n        this.setState({\n            arraySize: arraySize,\n            currentlySorting: false,\n            stripsArray: this.generateStripsArray(\n                arraySize,\n                this.state.arrayType,\n                this.surfaceHeight\n            )\n        });\n    };\n\n    handleAlgorithmSelector = algorithm => {\n        this.setState({\n            sortingAlgorithm: algorithm,\n            currentlySorting: false\n        });\n    };\n\n    handleArrayTypeSelector = arrayType => {\n        this.setState({\n            arrayType: arrayType,\n            currentlySorting: false,\n            stripsArray: this.generateStripsArray(\n                this.state.arraySize,\n                arrayType,\n                this.surfaceHeight\n            )\n        });\n    };\n\n    TopBar = () => {\n        return (\n            <span className=\"grid-container\">\n                <ArraySizeSelector\n                    className=\"ArraySizeSelector\"\n                    min={10}\n                    max={700}\n                    step={5}\n                    defaultValue={this.state.arraySize}\n                    onChangeHandler={this.handleArraySizeSelector}\n                />\n\n                <span className=\"grid-row\">\n                    <AlgorithmSelector\n                        className=\"AlgorithmSelector\"\n                        onChangeHandler={this.handleAlgorithmSelector}\n                    />\n\n                    {this.state.currentlySorting ? (\n                        <button\n                            className=\"sortControl\"\n                            onClick={() => this.stopSort()}\n                        >\n                            Stop Sorting\n                        </button>\n                    ) : (\n                        <button\n                            className=\"sortControl\"\n                            onClick={() =>\n                                this.runSort(\n                                    this.state.stripsArray,\n                                    this.Swap,\n                                    this.Continue,\n                                    this.Update\n                                )\n                            }\n                        >\n                            Start Sorting\n                        </button>\n                    )}\n\n                    <ArrayTypeSelector\n                        className=\"ArrayTypeSelector\"\n                        onChangeHandler={this.handleArrayTypeSelector}\n                    />\n                </span>\n            </span>\n        );\n    };\n\n    Strips = () => {\n        return this.state.stripsArray.map(strip => {\n            const stripStyles = {\n                height: `${strip.length}px`,\n                backgroundColor: strip.color\n            };\n            return (\n                <span\n                    key={this.uuidv4()}\n                    className=\"strip\"\n                    style={stripStyles}\n                ></span>\n            );\n        });\n    };\n\n    surfaceStyles = {\n        width: '90%',\n        margin: '0.5rem auto',\n        height: `${this.surfaceHeight}px`\n    };\n\n    render() {\n        return (\n            <div>\n                <this.TopBar />\n                <span\n                    className=\"surface\"\n                    ref=\"surface\"\n                    style={this.surfaceStyles}\n                >\n                    <this.Strips />\n                </span>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}