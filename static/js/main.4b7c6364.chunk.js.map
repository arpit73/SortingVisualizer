{"version":3,"sources":["TopBar/ArraySizeSelector.js","TopBar/SortingAlgorithms.js","TopBar/AlgorithmSelector.js","TopBar/ArrayTypeSelector.js","App.js","serviceWorker.js","index.js"],"names":["ArraySizeSelector","props","id","type","name","min","max","step","defaultValue","onChange","e","onChangeHandler","target","value","Algorithm","method","this","SortingAlgorithms","arr","swap","a","len","length","i","j","backup_1","color","backup_2","SortingOptions","map","algo","AlgorithmSelector","find","sendAlgorithm","TypeOptions","ArrayTypeSelector","Strip","App","surfaceHeight","componentDidMount","setState","stripsArray","generateStripsArray","state","arraySize","arrayType","maxValue","stripLengthArray","push","Math","ceil","random","increment","val","floor","decrement","sleep","runSort","array","swapMethod","sortingAlgorithm","handleArraySizeSelector","handleAlgorithmSelector","algorithm","handleArrayTypeSelector","TopBar","onClick","Strips","strip","stripStyles","height","backgroundColor","key","uuidv4","className","style","ms","Promise","resolve","setTimeout","replace","c","r","toString","surfaceStyles","width","ref","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4b7c6364.chunk.js","sourcesContent":["import React from 'react';\nimport './ArraySizeSelector.scss';\n\nconst ArraySizeSelector = props => {\n    return (\n        <span id=\"range\">\n            <input\n                id=\"slider\"\n                type=\"range\"\n                name=\"Array Size\"\n                min={props.min}\n                max={props.max}\n                step={props.step}\n                defaultValue={props.defaultValue}\n                onChange={e => props.onChangeHandler(e.target.value)}\n            />\n            <span id=\"display\">{props.defaultValue}</span>\n        </span>\n    );\n};\n\nexport default ArraySizeSelector;\n","class Algorithm {\n    constructor(name, method) {\n        this.name = name;\n        this.method = method;\n    }\n}\n\nconst BubbleSort = new Algorithm('Bubble Sort', async (arr, swap) => {\n    let len = arr.length;\n    for (let i = len - 1; i >= 0; i--) {\n        for (let j = 1; j <= i; j++) {\n            let backup_1 = arr[j - 1].color;\n            let backup_2 = arr[j].color;\n\n            arr[j - 1].color = 'red';\n            arr[j].color = 'red';\n\n            if (arr[j - 1].length > arr[j].length) {\n                await swap(arr, j - 1, j);\n            }\n\n            arr[j - 1].color = backup_1;\n            arr[j].color = backup_2;\n        }\n    }\n});\n\nconst QuickSort = new Algorithm('Quick Sort', async (arr, swap) => {\n    let len = arr.length;\n    for (let i = len - 1; i >= 0; i--) {\n        for (let j = 1; j <= i; j++) {\n            let backup_1 = arr[j - 1].color;\n            let backup_2 = arr[j].color;\n\n            arr[j - 1].color = 'red';\n            arr[j].color = 'red';\n\n            if (arr[j - 1].length > arr[j].length) {\n                await swap(arr, j - 1, j);\n            }\n\n            arr[j - 1].color = backup_1;\n            arr[j].color = backup_2;\n        }\n    }\n});\n\nconst SortingAlgorithms = [BubbleSort, QuickSort];\n\nexport default SortingAlgorithms;\n","import React from 'react';\nimport './Dropdown.scss';\nimport SortingAlgorithms from './SortingAlgorithms';\n\nconst SortingOptions = SortingAlgorithms.map(algo => (\n    <option value={algo.name}>{algo.name}</option>\n));\n\nconst AlgorithmSelector = props => {\n    const sendAlgorithm = value => {\n        const Algorithm = SortingAlgorithms.find(\n            Algorithm => Algorithm.name === value\n        );\n        props.onChangeHandler(Algorithm);\n    };\n    return (\n        <select\n            name=\"AlgorithmSelector\"\n            onChange={e => sendAlgorithm(e.target.value)}\n        >\n            {SortingOptions}\n        </select>\n    );\n};\n\nexport default AlgorithmSelector;\n","import React from 'react';\nimport './Dropdown.scss';\n\nconst ArrayTypes = ['Random', 'Almost Sorted', 'Reversed'];\nconst TypeOptions = ArrayTypes.map(type => (\n    <option value={type}>{type}</option>\n));\n\nconst ArrayTypeSelector = props => (\n    <select\n        name=\"ArrayTypeSelector\"\n        onChange={e => props.onChangeHandler(e.target.value)}\n    >\n        {TypeOptions}\n    </select>\n);\n\nexport default ArrayTypeSelector;\n","import React from 'react';\nimport './App.scss';\nimport ArraySizeSelector from './TopBar/ArraySizeSelector';\nimport AlgorithmSelector from './TopBar/AlgorithmSelector';\nimport ArrayTypeSelector from './TopBar/ArrayTypeSelector';\nimport SortingAlgorithms from './TopBar/SortingAlgorithms';\n\nclass Strip {\n    constructor(length = 10, color = 'rgb(25, 125, 51)') {\n        this.length = length;\n        this.color = color;\n    }\n}\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            arraySize: 50,\n            stripsArray: [],\n            sortingAlgorithm: SortingAlgorithms[0],\n            arrayType: 'Random'\n        };\n    }\n    surfaceHeight = 500; // px\n\n    componentDidMount = () => {\n        this.setState({\n            stripsArray: this.generateStripsArray(\n                this.state.arraySize,\n                this.state.arrayType,\n                this.surfaceHeight\n            )\n        });\n    };\n\n    generateStripsArray = (arraySize, arrayType, maxValue) => {\n        let stripLengthArray = [];\n        switch (arrayType) {\n            case 'Random':\n                for (let i = 0; i < arraySize; i++) {\n                    stripLengthArray.push(Math.ceil(Math.random() * maxValue));\n                }\n                break;\n\n            case 'Almost Sorted':\n                let increment = (maxValue - 10) / (arraySize - 1);\n                for (let val = 10; val <= maxValue; val += increment) {\n                    stripLengthArray.push(Math.floor(val));\n                }\n                [stripLengthArray[2], stripLengthArray[arraySize - 3]] = [\n                    stripLengthArray[arraySize - 3],\n                    stripLengthArray[2]\n                ];\n                break;\n\n            case 'Reversed':\n                let decrement = (maxValue - 10) / (arraySize - 1);\n                for (let val = maxValue; val >= 10; val -= decrement) {\n                    stripLengthArray.push(Math.floor(val));\n                }\n                break;\n\n            default:\n                break;\n        }\n\n        // let scaleFactor = maxValue / 10;\n\n        let strips = stripLengthArray.map(length => {\n            // let hue = 0,\n            //     saturation = 100,\n            //     luminosity = length / scaleFactor + 90;\n            // let color = `hsl(${hue}, ${saturation}%, ${luminosity}%)`;\n            let color = 'white';\n            return new Strip(length, color);\n        });\n\n        return strips;\n    };\n\n    sleep(ms = 0) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    uuidv4() {\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n            var r = (Math.random() * 16) | 0,\n                v = c === 'x' ? r : (r & 0x3) | 0x8;\n            return v.toString(16);\n        });\n    }\n\n    swap = async (arr, i, j) => {\n        [arr[i], arr[j]] = [arr[j], arr[i]];\n\n        await this.sleep();\n        this.setState({\n            stripsArray: arr\n        });\n    };\n\n    runSort = (array, swapMethod) => {\n        this.state.sortingAlgorithm.method(array, swapMethod);\n    };\n\n    handleArraySizeSelector = arraySize => {\n        this.setState({\n            arraySize: arraySize,\n            stripsArray: this.generateStripsArray(\n                arraySize,\n                this.state.arrayType,\n                this.surfaceHeight\n            )\n        });\n    };\n\n    handleAlgorithmSelector = algorithm => {\n        this.setState({\n            sortingAlgorithm: algorithm\n        });\n    };\n\n    handleArrayTypeSelector = arrayType => {\n        this.setState({\n            arrayType: arrayType,\n            stripsArray: this.generateStripsArray(\n                this.state.arraySize,\n                arrayType,\n                this.surfaceHeight\n            )\n        });\n    };\n\n    TopBar = () => {\n        return (\n            <span>\n                <AlgorithmSelector\n                    onChangeHandler={this.handleAlgorithmSelector}\n                />\n\n                <ArraySizeSelector\n                    min={10}\n                    max={1000}\n                    step={5}\n                    defaultValue={this.state.arraySize}\n                    onChangeHandler={this.handleArraySizeSelector}\n                />\n\n                <ArrayTypeSelector\n                    onChangeHandler={this.handleArrayTypeSelector}\n                />\n\n                <button\n                    onClick={() =>\n                        this.runSort(this.state.stripsArray, this.swap)\n                    }\n                >\n                    Sort\n                </button>\n            </span>\n        );\n    };\n\n    Strips = () => {\n        return this.state.stripsArray.map(strip => {\n            const stripStyles = {\n                height: `${strip.length}px`,\n                backgroundColor: strip.color\n            };\n            return (\n                <span\n                    key={this.uuidv4()}\n                    className=\"strip\"\n                    style={stripStyles}\n                ></span>\n            );\n        });\n    };\n\n    render() {\n        const surfaceStyles = {\n            width: '80%',\n            height: `${this.surfaceHeight}px`\n        };\n\n        return (\n            <div>\n                <this.TopBar />\n                <span className=\"surface\" ref=\"surface\" style={surfaceStyles}>\n                    <this.Strips />\n                </span>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}